// Generated by CoffeeScript 1.4.0
var Objective,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = Objective = (function() {

  function Objective() {
    this.bind = __bind(this.bind, this);

  }

  Objective.prototype.configure = function(runtime, scaffold, config) {
    this.runtime = runtime;
    this.scaffold = scaffold;
    this.config = config;
  };

  Objective.prototype.monitor = function(callback) {
    return this.runtime.logger.warn(function() {
      return 'plugin did not override Objective.monitor()';
    });
  };

  Objective.prototype.uplink = {};

  Objective.prototype.bind = function(When, Then, edge) {
    var _this = this;
    this.protocol(When, Then);
    this.uplink.When = When;
    this.uplink.Then = Then;
    return When('register?', function(payload) {
      _this.runtime.logger.log({
        verbose: function() {
          return {
            'handling uplink register request': {
              localId: edge.localId()
            }
          };
        }
      });
      _this.uplink = {
        edge: edge,
        when: When,
        then: Then
      };
      return Then('register!', {
        _node: {
          Entity: {
            "implements": [
              {
                "class": 'symbal:Objective',
                version: 0
              }, {
                "class": 'symbal:Collaborator',
                version: 0
              }
            ],
            instance: _this.instance()
          }
        }
      });
    });
  };

  Objective.prototype.edge = function(placeholder, nodes) {};

  Objective.prototype.hup = function() {};

  Objective.prototype.handles = [];

  Objective.prototype.matches = [];

  return Objective;

})();
