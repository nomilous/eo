// Generated by CoffeeScript 1.4.0
var Develop, Objective, develop,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Objective = require('../objective');

Develop = (function(_super) {

  __extends(Develop, _super);

  function Develop() {
    return Develop.__super__.constructor.apply(this, arguments);
  }

  Develop.prototype.monitor = function(callback) {
    var specDir, srcDir,
      _this = this;
    if (!this.config.spec) {
      this.config.spec = 'spec';
    }
    if (!this.config.src) {
      this.config.src = 'src';
    }
    specDir = this.config.path + '/' + this.config.spec;
    srcDir = this.config.path + '/' + this.config.src;
    this.runtime.logger.log({
      info: function() {
        return {
          'watching': {
            paths: [specDir, srcDir]
          }
        };
      }
    });
    this.runtime.monitors.directory.watch(specDir, function(error, file, stat) {
      return console.log('changes!', arguments);
    });
    return this.runtime.monitors.directory.watch(srcDir, function(error, file, stat) {
      return console.log('changes!', arguments);
    });
  };

  Develop.prototype.instance = function() {
    return {
      "class": 'eo:Develop',
      version: 0
    };
  };

  Develop.prototype.protocol = function(When, Then) {};

  return Develop;

})(Objective);

if (typeof develop === 'undefined') {
  develop = new Develop;
}

module.exports = develop;
