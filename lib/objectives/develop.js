// Generated by CoffeeScript 1.4.0
var Develop, Objective, develop,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Objective = require('../objective');

Develop = (function(_super) {

  __extends(Develop, _super);

  function Develop() {
    return Develop.__super__.constructor.apply(this, arguments);
  }

  Develop.prototype.monitor = function(callback) {
    var dstDir, path, specDir, srcDir,
      _this = this;
    if (!this.config.spec) {
      this.config.spec = 'spec';
    }
    if (!this.config.src) {
      this.config.src = 'src';
    }
    if (!this.config.dst) {
      this.config.dst = 'lib';
    }
    path = this.config.path;
    specDir = path + '/' + this.config.spec;
    srcDir = path + '/' + this.config.src;
    dstDir = path + '/' + this.config.dst;
    this.runtime.logger.log({
      info: function() {
        return {
          'watching': {
            paths: [specDir, srcDir]
          }
        };
      }
    });
    this.runtime.monitors.directory.watch(specDir, function(error, file, stat) {
      if (error) {
        return _this.runtime.logger.error(function() {
          return {
            'failed watch': {
              error: error
            }
          };
        });
      }
      return callback(null, {
        action: 'startLocalRealizer',
        script: file
      });
    });
    return this.runtime.monitors.directory.watch(srcDir, function(error, file, stat) {
      var type;
      if (error) {
        return _this.runtime.logger.error(function() {
          return {
            'failed watch': {
              error: error
            }
          };
        });
      }
      type = file.match(/\.(\w*)$/)[1];
      return _this.runtime.compilers[type].compile(_this.runtime.logger, {
        src: srcDir,
        dst: dstDir,
        file: file
      }, function(error) {
        if (error) {
          callback(error);
          return;
        }
        return _this.runtime.compilers[type].ensureSpec(_this.runtime.logger, {
          spec: specDir,
          src: srcDir,
          file: file
        }, function(error, created) {
          if (error) {
            callback(error);
            return;
          }
          if (!created) {
            return;
          }
          return callback(null, {
            action: 'startLocalRealizer',
            script: created
          });
        });
      });
    });
  };

  Develop.prototype.instance = function() {
    return {
      "class": 'eo:Develop',
      version: 0
    };
  };

  Develop.prototype.protocol = function(When, Then) {};

  return Develop;

})(Objective);

if (typeof develop === 'undefined') {
  develop = new Develop;
}

module.exports = develop;
