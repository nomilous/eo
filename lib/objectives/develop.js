// Generated by CoffeeScript 1.4.0
var colors, getCompiler, messenger, nodefncall, sequence, start;

nodefncall = require('when/node/function').call;

sequence = require('when/sequence');

colors = require('colors');

messenger = function(msg, next) {
  var key, output, tenor, title, type, _ref;
  _ref = msg.context, title = _ref.title, type = _ref.type, tenor = _ref.tenor;
  switch (title) {
    case 'objective::start':
      output = "\n";
      for (key in msg.properties) {
        if (typeof msg.properties[key] !== 'string') {
          continue;
        }
        if (key === 'secret') {
          continue;
        }
        if (msg.properties[key].match(/\n/)) {
          output += "(" + key + ")\n" + msg.properties[key].bold + "\n";
        } else {
          output += "(" + key + ") " + msg.properties[key].bold + "\n";
        }
      }
      console.log(output);
      break;
    default:
      console.log(msg.content);
  }
  return next();
};

getCompiler = function(context, file) {
  var compiler, ensureSpec, ext;
  ext = file.match(/\.(\w*)$/)[1];
  switch (ext) {
    case 'coffee':
    case 'litcoffee':
      compiler = context.tools.compiler.coffee.compile;
      ensureSpec = context.tools.compiler.coffee.ensureSpec;
      break;
    default:
      try {
        compiler = context.tools.compiler[ext].compile;
      } catch (_error) {}
      try {
        ensureSpec = context.tools.compiler[ext].ensureSpec;
      } catch (_error) {}
  }
  compiler || (compiler = function(notice, opts, cb) {
    return cb(null);
  });
  ensureSpec || (ensureSpec = function(notice, opts, cb) {
    return cb(null);
  });
  return {
    compiler: compiler,
    ensureSpec: ensureSpec
  };
};

start = function(context, notice, moduleFn) {
  notice.use(function(msg, next) {
    return next();
  });
  if (context.spec == null) {
    context.spec = './spec';
  }
  if (context.lib == null) {
    context.lib = './lib';
  }
  if (context.src == null) {
    context.src = './src';
  }
  context.tools.monitor.directory(notice, context.src, function(placeholder, file, stat) {
    var compiler, done, ensureSpec, opts, _ref;
    _ref = getCompiler(context, file), compiler = _ref.compiler, ensureSpec = _ref.ensureSpec;
    opts = {
      file: file,
      spec: context.spec,
      dst: context.lib,
      src: context.src
    };
    done = sequence([
      function() {
        return nodefncall(compiler, notice, opts);
      }, function() {
        return nodefncall(ensureSpec, notice, opts);
      }
    ]);
    return done.then(function(res) {
      var specfile;
      specfile = res[1];
      if (specfile == null) {
        return;
      }
      return context.realizers.task('run spec', {
        id: specfile,
        script: specfile
      });
    }, function(err) {
      return notice.info.bad('compile error', {
        error: err
      });
    });
  });
  context.tools.monitor.directory(notice, context.spec, function(placeholder, file, stat) {
    var compiler, ensureSpec, _ref;
    _ref = getCompiler(context, file), compiler = _ref.compiler, ensureSpec = _ref.ensureSpec;
    return compiler(notice, {
      file: file,
      src: context.spec
    }, function(error, result) {
      if (error != null) {
        return;
      }
      return context.realizers.task('run spec', {
        id: file,
        script: file
      });
    });
  });
  notice.event('objective::start', {
    "class": 'eo:develop',
    properties: context
  });
  return moduleFn();
};

exports.start = start;

exports.messenger = messenger;
