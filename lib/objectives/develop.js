// Generated by CoffeeScript 1.4.0
var nodefncall, sequence, start;

nodefncall = require('when/node/function').call;

sequence = require('when/sequence');

start = function(context, notice, moduleFn) {
  notice.use(function(msg, next) {
    return next();
  });
  if (context.spec == null) {
    context.spec = './spec';
  }
  if (context.lib == null) {
    context.lib = './lib';
  }
  if (context.src == null) {
    context.src = './src';
  }
  context.tools.monitor.directory(notice, context.src, function(placeholder, file, stat) {
    var compile, done, ensureSpec, ext, opts;
    ext = file.match(/\.(\w*)$/)[1];
    switch (ext) {
      case 'coffee':
      case 'litcoffee':
        compile = context.tools.compiler.coffee.compile;
        ensureSpec = context.tools.compiler.coffee.ensureSpec;
        break;
      default:
        try {
          compile = context.tools.compiler[ext].compile;
        } catch (_error) {}
        try {
          ensureSpec = context.tools.compiler.coffee.ensureSpec;
        } catch (_error) {}
    }
    compile || (compile = function(notice, opts, cb) {
      return cb(null);
    });
    ensureSpec || (ensureSpec = function(notice, opts, cb) {
      return cb(null);
    });
    opts = {
      file: file,
      spec: context.spec,
      dst: context.lib,
      src: context.src
    };
    done = sequence([
      function() {
        return nodefncall(compile, notice, opts);
      }, function() {
        return nodefncall(ensureSpec, notice, opts);
      }
    ]);
    return done.then(function(res) {
      return console.log('RUN SPEC', res[1]);
    }, function(err) {
      return notice.info.bad('compile error', {
        error: err
      });
    });
  });
  context.tools.monitor.directory(notice, context.spec, function(placeholder, file, stat) {});
  notice.event('objective::start', {
    "class": 'eo:develop',
    properties: context
  });
  return moduleFn();
};

exports.start = start;
